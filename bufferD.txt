//------------------------------------------------------------
// RENDERING FUNCTIONS

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    //get inverse of the resolution
    sDCoord invRes = 1.0 / iChannelResolution[0].xy;
    
    //get location of pixel on channel a
    sCoord uv = vp.pixelCoord * invRes;
    sCoord uvUpRightCorner = (vp.pixelCoord + 0.5) * invRes;
    
    //this gets the vertical blur
    //using the blur matrix 
    // 1/4
    // 1
    // 2
    // 1
    // this can be turned into 
    // 0.25
    // 0.5
    // 0.25
    vec4 returnColor = (
        texture(iChannel0, vec2(uv.x, uv.y - 1.0)) * 0.25 + //this gets the pixel on top top 
        texture(iChannel0, uv)                     * 0.5  + //this gets the current pixel
        texture(iChannel0, vec2(uv.x, uv.y + 1.0)) * 0.25   //this gets the pixel on the bottom
                       );
    
    return returnColor;
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}
